#!/usr/bin/env python3

import glob
import cmd
import imp
import os
import platform
import subprocess
import sys
import yaml
import readline

#############################################
# This currently works with ASG names only. #
#############################################

defaultYaml = r'''
windows:
  - name: multi ssh
    root: .
    layout: tiled
    panes:
'''

DESCRIBE_EC2_CMD = '''aws ec2 describe-instances --filter Name="instance-state-name",Values="running" "Name=tag:aws:autoscaling:groupName,Values=*%s*" --query  'Reservations[].Instances[].[PrivateIpAddress]' --output text'''
LIST_ASG_NAMES_CMD = '''aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[].AutoScalingGroupName' --output text'''
MAX_TARGET_LIST_SIZE = 15


def getAsgNames():
    '''
    Finds the currently available Autoscaling group names
    '''
    print('\033[1;31mUpdating targets...\033[0m')
    call = subprocess.Popen(LIST_ASG_NAMES_CMD, shell=True, stdout=subprocess.PIPE)
    groups = call.communicate()[0].decode('utf-8').strip().replace('\n', '\t').split('\t')
    return groups


def getTargets(asgFilter):
    cmd = DESCRIBE_EC2_CMD % asgFilter
    print("Running cmd: ", cmd)
    cmd_proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    targets = cmd_proc.communicate()[0].decode('utf-8').strip().split('\n')
    # Filter the target list, remove empty lines and dangling new lines
    targets = list(filter(lambda t: len(t) > 0 and t is not '\n', targets))
    if len(targets) > MAX_TARGET_LIST_SIZE:
        yes = set(['yes', 'y', 'ye', ''])
        no = set(['no', 'n'])
        print('\033[93m\033[1mFound more than %d targets, connecting to all can cause your system to run out of memory!!' %
              MAX_TARGET_LIST_SIZE)
        print('Found the following targets:\n%s', str(targets))
        print('\nContinue? [y]es/[n]o OR\nEnter number of instances to pick\033[0m')
        choice = input().lower()
        if choice in yes:
            return targets
        elif choice in no:
            sys.exit(0)
        elif str.isdigit(choice):
            return targets[:int(choice)]
    return targets


def sshLinux(targets):
    linux_commands = ""
    if targets:
        for t in targets:
            if system == 'Linux':
                linux_commands += '\'bash -c "ssh %s" || bash\' ' % t.strip(
                    '\n')
        subprocess.check_output(
            '/usr/local/bin/terminator-split -e %s localhost' % linux_commands, shell=True)
    else:
        print('No matching targets founds for query:\n\t%s' %
              (DESCRIBE_EC2_CMD % asgFilter))
        sys.exit(3)


def sshDarwin(targets, asgFilter):
    if targets:
        try:
            termConf = yaml.load(defaultYaml)
            panes = termConf['windows'][0]['panes'] = []

            for t in targets:
                sshCommand = 'ssh ' + t.strip('\n')
                panes.append(sshCommand)

            destFilePath = os.path.expanduser(
                '~/.itermocil/%s.yml' % asgFilter)
            if not os.path.exists(os.path.dirname(destFilePath)):
                try:
                    os.makedirs(os.path.dirname(destFilePath))
                except OSError as exc:  # Guard against race condition
                    if exc.errno != errno.EEXIST:
                        raise
            destFile = open(destFilePath, 'w+')
            yaml.dump(termConf, destFile, default_flow_style=True, indent=2)
            destFile.close()
            call = subprocess.Popen(
                'itermocil %s &> /dev/null' % asgFilter, shell=True, stdout=subprocess.PIPE)
            sys.exit(0)
        except yaml.YAMLError as exc:
            print('Failed to run: ')
            print(exc)
            sys.exit(2)
    else:
        print('No matching targets founds for query:\n\t%s' %
              (DESCRIBE_EC2_CMD % asgFilter))
        sys.exit(3)


class ASGTargets(cmd.Cmd):
    system = platform.system()
    intro = '''Welcome to the sshall interactive shell.  You can tab-complete target autoscaling group names.
    Type help list possible ssh targets.
    For groups with more than %d targets, you can specify a number to ssh into a subset.''' % MAX_TARGET_LIST_SIZE
    prompt = '(sshall) '

    def __init__(self):
        cmd.Cmd.__init__(self)
        readline.set_completer_delims(' ') # space is the only delimiter now

    def pre_check_deps_by_os(self):
        if self.system == 'Darwin':
            # Check that itermocil is installed
            if not any(os.access(os.path.join(path, 'itermocil'), os.X_OK) for path in os.environ['PATH'].split(os.pathsep)):
                print(
                    'itermocil not found in system path. Installing itermocil first...')
                brewInstall = subprocess.Popen(
                    'brew update && brew install TomAnthony/brews/itermocil', shell=True, stdout=subprocess.PIPE)
                brewInstall.wait()
                final_output = brewInstall.stdout.read()
                if brewInstall.returncode is not 0:
                    print('Failed to install itermocil, please install it manually with the command:\n\tbrew update && brew install TomAnthony/brews/itermocil')
                    sys.exit(1)
        elif self.system == 'Linux':
            # Check that terminator is installed
            if not any(os.access(os.path.join(path, 'terminator'), os.X_OK) for path in os.environ['PATH'].split(os.pathsep)):
                print(
                    'terminator not found in system path. Install using:\tsudo apt-get install terminator')
                sys.exit(1)

            # Check configobj is installed
            try:
                imp.find_module('configobj')
            except ImportError:
                print(
                    'python module configobj not found. Install using:\tsudo pip install configobj')
                sys.exit(1)
        else:
            print('Only Linux and Darwin (MacOS) systems are supported!')

    def can_exit(self):
        return True

    def do_exit(self, s):
        return os._exit(0)

    def onecmd(self, line):
        r = super(ASGTargets, self).onecmd(line)
        if r and (self.can_exit() or
                  input('exit anyway ? (yes/no):') == 'yes'):
            return True
        if line in ['help', 'exit', 'EOF', '']:
            return False
        self.perform_ssh(line)
        return False

    def perform_ssh(self, target):
        if self.system == 'Linux':
            sshLinux(getTargets(target))
        elif self.system == 'Darwin':
            sshDarwin(getTargets(target), target)
        return True

    def help_exit(self):
        print("Exit the interpreter.")

    def default(self, line):
        '''
        Override default to support dashes in asg names
        '''
        cmd, arg, line = self.parseline(line)
        func = [getattr(self, n) for n in self.get_names() if n.startswith('do_' + line)]
        if func: # maybe check if exactly one or more elements, and tell the user
            func[0](arg)
    
    do_EOF = do_exit


def add_dynamic_asg_targets(target, targets):
    '''
    This method will monkey patch the ASGTargets class to add custom targets for your
    AWS environment and your asg names will then be available for autocomplete
    '''

    def do_target(self, line):
        self.perform_ssh(target)

    def complete_target(self, text, line, start_index, end_index):
        if text:
            return [group for group in targets if group.startswith(text)]
        else:
            return targets

    setattr(ASGTargets, "do_%s" % t, do_target)
    setattr(ASGTargets, "complete_%s" % t, complete_target)

if __name__ == '__main__':
    asg_targets = ASGTargets()
    asg_targets.pre_check_deps_by_os()

    if len(sys.argv) > 1:
        asg_targets.onecmd(' '.join(sys.argv[1:]))
    else:
        targets = getAsgNames()
        for t in targets:
            add_dynamic_asg_targets(t, targets)
        asg_target_dynamic = ASGTargets()
        asg_target_dynamic.precmd('help')
        asg_target_dynamic.cmdloop()
